// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stp_management.proto

package OpenNos_Plugin_Stp

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StpState_State int32

const (
	StpState_DISABLED   StpState_State = 0
	StpState_BLOCKING   StpState_State = 1
	StpState_LISTENING  StpState_State = 2
	StpState_LEARNING   StpState_State = 3
	StpState_FORWARDING StpState_State = 4
)

var StpState_State_name = map[int32]string{
	0: "DISABLED",
	1: "BLOCKING",
	2: "LISTENING",
	3: "LEARNING",
	4: "FORWARDING",
}

var StpState_State_value = map[string]int32{
	"DISABLED":   0,
	"BLOCKING":   1,
	"LISTENING":  2,
	"LEARNING":   3,
	"FORWARDING": 4,
}

func (x StpState_State) String() string {
	return proto.EnumName(StpState_State_name, int32(x))
}

func (StpState_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0cd0a974678078f1, []int{1, 0}
}

type StpResult_Result int32

const (
	StpResult_FAILED  StpResult_Result = 0
	StpResult_SUCCESS StpResult_Result = 1
)

var StpResult_Result_name = map[int32]string{
	0: "FAILED",
	1: "SUCCESS",
}

var StpResult_Result_value = map[string]int32{
	"FAILED":  0,
	"SUCCESS": 1,
}

func (x StpResult_Result) String() string {
	return proto.EnumName(StpResult_Result_name, int32(x))
}

func (StpResult_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0cd0a974678078f1, []int{3, 0}
}

type StpInterface struct {
	Ifname               string   `protobuf:"bytes,1,opt,name=ifname,proto3" json:"ifname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StpInterface) Reset()         { *m = StpInterface{} }
func (m *StpInterface) String() string { return proto.CompactTextString(m) }
func (*StpInterface) ProtoMessage()    {}
func (*StpInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cd0a974678078f1, []int{0}
}

func (m *StpInterface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StpInterface.Unmarshal(m, b)
}
func (m *StpInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StpInterface.Marshal(b, m, deterministic)
}
func (m *StpInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StpInterface.Merge(m, src)
}
func (m *StpInterface) XXX_Size() int {
	return xxx_messageInfo_StpInterface.Size(m)
}
func (m *StpInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_StpInterface.DiscardUnknown(m)
}

var xxx_messageInfo_StpInterface proto.InternalMessageInfo

func (m *StpInterface) GetIfname() string {
	if m != nil {
		return m.Ifname
	}
	return ""
}

type StpState struct {
	Interface            *StpInterface  `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	State                StpState_State `protobuf:"varint,2,opt,name=state,proto3,enum=OpenNos.Plugin.Stp.StpState_State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *StpState) Reset()         { *m = StpState{} }
func (m *StpState) String() string { return proto.CompactTextString(m) }
func (*StpState) ProtoMessage()    {}
func (*StpState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cd0a974678078f1, []int{1}
}

func (m *StpState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StpState.Unmarshal(m, b)
}
func (m *StpState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StpState.Marshal(b, m, deterministic)
}
func (m *StpState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StpState.Merge(m, src)
}
func (m *StpState) XXX_Size() int {
	return xxx_messageInfo_StpState.Size(m)
}
func (m *StpState) XXX_DiscardUnknown() {
	xxx_messageInfo_StpState.DiscardUnknown(m)
}

var xxx_messageInfo_StpState proto.InternalMessageInfo

func (m *StpState) GetInterface() *StpInterface {
	if m != nil {
		return m.Interface
	}
	return nil
}

func (m *StpState) GetState() StpState_State {
	if m != nil {
		return m.State
	}
	return StpState_DISABLED
}

type StpAgeingTime struct {
	AgeingTime           uint32   `protobuf:"varint,1,opt,name=ageingTime,proto3" json:"ageingTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StpAgeingTime) Reset()         { *m = StpAgeingTime{} }
func (m *StpAgeingTime) String() string { return proto.CompactTextString(m) }
func (*StpAgeingTime) ProtoMessage()    {}
func (*StpAgeingTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cd0a974678078f1, []int{2}
}

func (m *StpAgeingTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StpAgeingTime.Unmarshal(m, b)
}
func (m *StpAgeingTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StpAgeingTime.Marshal(b, m, deterministic)
}
func (m *StpAgeingTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StpAgeingTime.Merge(m, src)
}
func (m *StpAgeingTime) XXX_Size() int {
	return xxx_messageInfo_StpAgeingTime.Size(m)
}
func (m *StpAgeingTime) XXX_DiscardUnknown() {
	xxx_messageInfo_StpAgeingTime.DiscardUnknown(m)
}

var xxx_messageInfo_StpAgeingTime proto.InternalMessageInfo

func (m *StpAgeingTime) GetAgeingTime() uint32 {
	if m != nil {
		return m.AgeingTime
	}
	return 0
}

type StpResult struct {
	Result               StpResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=OpenNos.Plugin.Stp.StpResult_Result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StpResult) Reset()         { *m = StpResult{} }
func (m *StpResult) String() string { return proto.CompactTextString(m) }
func (*StpResult) ProtoMessage()    {}
func (*StpResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cd0a974678078f1, []int{3}
}

func (m *StpResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StpResult.Unmarshal(m, b)
}
func (m *StpResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StpResult.Marshal(b, m, deterministic)
}
func (m *StpResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StpResult.Merge(m, src)
}
func (m *StpResult) XXX_Size() int {
	return xxx_messageInfo_StpResult.Size(m)
}
func (m *StpResult) XXX_DiscardUnknown() {
	xxx_messageInfo_StpResult.DiscardUnknown(m)
}

var xxx_messageInfo_StpResult proto.InternalMessageInfo

func (m *StpResult) GetResult() StpResult_Result {
	if m != nil {
		return m.Result
	}
	return StpResult_FAILED
}

func init() {
	proto.RegisterEnum("OpenNos.Plugin.Stp.StpState_State", StpState_State_name, StpState_State_value)
	proto.RegisterEnum("OpenNos.Plugin.Stp.StpResult_Result", StpResult_Result_name, StpResult_Result_value)
	proto.RegisterType((*StpInterface)(nil), "OpenNos.Plugin.Stp.StpInterface")
	proto.RegisterType((*StpState)(nil), "OpenNos.Plugin.Stp.StpState")
	proto.RegisterType((*StpAgeingTime)(nil), "OpenNos.Plugin.Stp.StpAgeingTime")
	proto.RegisterType((*StpResult)(nil), "OpenNos.Plugin.Stp.StpResult")
}

func init() { proto.RegisterFile("stp_management.proto", fileDescriptor_0cd0a974678078f1) }

var fileDescriptor_0cd0a974678078f1 = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xdf, 0x6b, 0xea, 0x30,
	0x18, 0xb5, 0xde, 0x6b, 0xaf, 0xfd, 0xb4, 0xe2, 0x0d, 0x63, 0xc8, 0xd8, 0x86, 0x86, 0x31, 0x7c,
	0xea, 0xa0, 0x7b, 0xd9, 0xc3, 0x18, 0x54, 0x6d, 0x47, 0x59, 0xfd, 0x41, 0xe2, 0xd8, 0xe3, 0xa8,
	0x5b, 0xec, 0x0a, 0x6d, 0x0c, 0x36, 0xfe, 0x0d, 0xfb, 0x0f, 0xf7, 0xf7, 0x8c, 0xa6, 0x4e, 0x85,
	0xa1, 0xbe, 0xb4, 0x39, 0xc9, 0x39, 0x27, 0xdf, 0x77, 0xbe, 0xc0, 0x49, 0x26, 0xc5, 0x6b, 0x1a,
	0xf2, 0x30, 0x62, 0x29, 0xe3, 0xd2, 0x12, 0xcb, 0x85, 0x5c, 0x20, 0x34, 0x16, 0x8c, 0x8f, 0x16,
	0x99, 0x35, 0x49, 0x56, 0x51, 0xcc, 0x2d, 0x2a, 0x05, 0xbe, 0x86, 0x3a, 0x95, 0xc2, 0xe7, 0x92,
	0x2d, 0xe7, 0xe1, 0x1b, 0x43, 0xa7, 0xa0, 0xc7, 0x73, 0x1e, 0xa6, 0xac, 0xa5, 0xb5, 0xb5, 0xae,
	0x41, 0xd6, 0x08, 0x7f, 0x69, 0x50, 0xa5, 0x52, 0x50, 0x19, 0x4a, 0x86, 0x1e, 0xc0, 0x88, 0x7f,
	0x14, 0x8a, 0x57, 0xb3, 0xdb, 0xd6, 0x6f, 0x73, 0x6b, 0xd7, 0x99, 0x6c, 0x25, 0xe8, 0x0e, 0x2a,
	0x59, 0x6e, 0xd4, 0x2a, 0xb7, 0xb5, 0x6e, 0xc3, 0xc6, 0x7b, 0xb4, 0xea, 0x32, 0x4b, 0x7d, 0x49,
	0x21, 0xc0, 0x13, 0xa8, 0x14, 0x25, 0xd4, 0xa1, 0x3a, 0xf0, 0xa9, 0xd3, 0x0b, 0xdc, 0x41, 0xb3,
	0x94, 0xa3, 0x5e, 0x30, 0xee, 0x3f, 0xf9, 0xa3, 0xc7, 0xa6, 0x86, 0x4c, 0x30, 0x02, 0x9f, 0x4e,
	0xdd, 0x51, 0x0e, 0xcb, 0xf9, 0x61, 0xe0, 0x3a, 0x44, 0xa1, 0x3f, 0xa8, 0x01, 0xe0, 0x8d, 0xc9,
	0x8b, 0x43, 0x06, 0x39, 0xfe, 0x8b, 0x6f, 0xc0, 0xa4, 0x52, 0x38, 0x11, 0x8b, 0x79, 0x34, 0x8d,
	0x53, 0x86, 0x2e, 0x01, 0xc2, 0x0d, 0x52, 0xdd, 0x99, 0x64, 0x67, 0x07, 0x27, 0x60, 0x50, 0x29,
	0x08, 0xcb, 0x56, 0x89, 0x44, 0xf7, 0xa0, 0x2f, 0xd5, 0x4a, 0x11, 0x1b, 0xf6, 0xd5, 0x9e, 0x56,
	0x0a, 0xba, 0x55, 0xfc, 0xc8, 0x5a, 0x83, 0x3b, 0xa0, 0xaf, 0x7d, 0x00, 0x74, 0xcf, 0xf1, 0x8b,
	0x66, 0x6a, 0xf0, 0x8f, 0x3e, 0xf7, 0xfb, 0x2e, 0xa5, 0x4d, 0xcd, 0xfe, 0x2c, 0xab, 0xfa, 0x86,
	0x9b, 0x59, 0x22, 0x02, 0xff, 0x29, 0x93, 0x9b, 0x5c, 0x8b, 0x38, 0xce, 0x0f, 0x45, 0x78, 0x76,
	0x71, 0xb0, 0x2a, 0x5c, 0x42, 0x43, 0xa8, 0x7a, 0xc9, 0x2a, 0xfb, 0xf0, 0xde, 0x67, 0xe8, 0xe8,
	0x24, 0x8f, 0xdb, 0x51, 0x30, 0x29, 0x93, 0x3b, 0x99, 0x76, 0xf6, 0x28, 0xb6, 0x94, 0xa3, 0xa6,
	0x33, 0x5d, 0x3d, 0xe2, 0xdb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x62, 0x66, 0x57, 0x65, 0xdc,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StpManagementClient is the client API for StpManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StpManagementClient interface {
	SetInterfaceState(ctx context.Context, in *StpState, opts ...grpc.CallOption) (*StpResult, error)
	FlushFdb(ctx context.Context, in *StpInterface, opts ...grpc.CallOption) (*StpResult, error)
	SetAgeingTime(ctx context.Context, in *StpAgeingTime, opts ...grpc.CallOption) (*StpResult, error)
}

type stpManagementClient struct {
	cc *grpc.ClientConn
}

func NewStpManagementClient(cc *grpc.ClientConn) StpManagementClient {
	return &stpManagementClient{cc}
}

func (c *stpManagementClient) SetInterfaceState(ctx context.Context, in *StpState, opts ...grpc.CallOption) (*StpResult, error) {
	out := new(StpResult)
	err := c.cc.Invoke(ctx, "/OpenNos.Plugin.Stp.StpManagement/SetInterfaceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stpManagementClient) FlushFdb(ctx context.Context, in *StpInterface, opts ...grpc.CallOption) (*StpResult, error) {
	out := new(StpResult)
	err := c.cc.Invoke(ctx, "/OpenNos.Plugin.Stp.StpManagement/FlushFdb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stpManagementClient) SetAgeingTime(ctx context.Context, in *StpAgeingTime, opts ...grpc.CallOption) (*StpResult, error) {
	out := new(StpResult)
	err := c.cc.Invoke(ctx, "/OpenNos.Plugin.Stp.StpManagement/SetAgeingTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StpManagementServer is the server API for StpManagement service.
type StpManagementServer interface {
	SetInterfaceState(context.Context, *StpState) (*StpResult, error)
	FlushFdb(context.Context, *StpInterface) (*StpResult, error)
	SetAgeingTime(context.Context, *StpAgeingTime) (*StpResult, error)
}

// UnimplementedStpManagementServer can be embedded to have forward compatible implementations.
type UnimplementedStpManagementServer struct {
}

func (*UnimplementedStpManagementServer) SetInterfaceState(ctx context.Context, req *StpState) (*StpResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInterfaceState not implemented")
}
func (*UnimplementedStpManagementServer) FlushFdb(ctx context.Context, req *StpInterface) (*StpResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushFdb not implemented")
}
func (*UnimplementedStpManagementServer) SetAgeingTime(ctx context.Context, req *StpAgeingTime) (*StpResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAgeingTime not implemented")
}

func RegisterStpManagementServer(s *grpc.Server, srv StpManagementServer) {
	s.RegisterService(&_StpManagement_serviceDesc, srv)
}

func _StpManagement_SetInterfaceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StpState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StpManagementServer).SetInterfaceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenNos.Plugin.Stp.StpManagement/SetInterfaceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StpManagementServer).SetInterfaceState(ctx, req.(*StpState))
	}
	return interceptor(ctx, in, info, handler)
}

func _StpManagement_FlushFdb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StpInterface)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StpManagementServer).FlushFdb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenNos.Plugin.Stp.StpManagement/FlushFdb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StpManagementServer).FlushFdb(ctx, req.(*StpInterface))
	}
	return interceptor(ctx, in, info, handler)
}

func _StpManagement_SetAgeingTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StpAgeingTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StpManagementServer).SetAgeingTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenNos.Plugin.Stp.StpManagement/SetAgeingTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StpManagementServer).SetAgeingTime(ctx, req.(*StpAgeingTime))
	}
	return interceptor(ctx, in, info, handler)
}

var _StpManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "OpenNos.Plugin.Stp.StpManagement",
	HandlerType: (*StpManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetInterfaceState",
			Handler:    _StpManagement_SetInterfaceState_Handler,
		},
		{
			MethodName: "FlushFdb",
			Handler:    _StpManagement_FlushFdb_Handler,
		},
		{
			MethodName: "SetAgeingTime",
			Handler:    _StpManagement_SetAgeingTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stp_management.proto",
}
